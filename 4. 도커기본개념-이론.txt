#########################################################################
[도커기본개념-이론]
1. 컨테이너 와 컨테이너 이미지
2. 컨테이너 동작 방식

#########################################################################
1. 컨테이너 와 컨테이너 이미지
- Docker HOST 에는 리눅스 커널을 기반으로 작동하는 docker daemon 이 존재한다.
- Docker는 하나의 도커 Host 내에서 다수의 독립적인 컨테이너 이미지를 구동시킬수 있다.
- 하나의 도커 이미지는 [서비스 + 개발자소스 + 실행환경] 등을 포함하여 단일 이미지로 구성이 가능하다.
  ㄴ running application
  ㄴ source  image layer
  ㄴ base    image layer
  
- 컨테이너 이미지 vs 컨테이너
  ㄴ 하나의 컨테이너 이미지에는 각각의 이미지 레이어별 파일이 별도로 존재한다. (read only)
  ㄴ 해당 이미지 묶음은 컨테이너 단위로 실행이 된다. (read/write)

#########################################################################
2. 컨테이너 동작 방식
- 컨테이너 이미지 다운로드 경로
  ㄴ 컨테이너 이미지 repository : hub.docker.com

- 컨테이너 이미지 검색
  ㄴ docker search nginx
    (docker hub 를 통해 nginx 이미지가 존재하는지 검색한다.)
  ㄴ 컨테이너 이미지 설치
    - docker pull nginx:latest
	
  ㄴ 컨테이너 이미지 구동
    - docker run -d --name web -p 80:80 nginx:latest
	  ㄴ -d	 	: detached(분리된) 모드로 (반대:foreground)
	  ㄴ --name 	: web 이라는 이름의 컨테이너 (컨테이너를 식별하는 이름. 그외 UUID long, UUID short이 있다.)
      ㄴ -p	 	: 80포트로 nginx 이미지를 담아 실행 시킨다. (호스트의 포트 80 을 컨테이너 80포트에 연결 시킨다.)
	              (※ -P 1234-1236:1234-1236 : 대역폭으로 할당도 가능하다. )