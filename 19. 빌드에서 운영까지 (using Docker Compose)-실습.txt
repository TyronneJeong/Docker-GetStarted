#########################################################################
[빌드에서 운영까지 using Docker Compose]
1. Docker-Compose 설치하기
2. 컨테이너 빌드에서 운영까지
3. MySQL 데이터베이스를 사용하는 WordPress 운영하기

#########################################################################
1. Docker-Compose 설치하기
- 설치하기
  ㄴ https://docs.docker.com/compose/install/
  ㄴ Docker 엔진은 설치되어 있어야 한다.
  ㄴ ROOT 계정외 사용자 계정이 하나 존재해야 한다.
  
  ㄴ sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  
- 권한부여
  ㄴ sudo chmod +x /usr/local/bin/docker-compose
  
- 정상설치 확인
  ㄴ docker-compose version
  
- 사용자 전환 하기
  ㄴ su - guru

#########################################################################
2. 컨테이너 빌드에서 운영까지
- 0.시작하기
  ㄴ https://docs.docker.com/compose/gettingstarted/
  
- 1. 서비스 디렉토리 생성
  ㄴ mkdir composetest
  ㄴ cd composetest

- 2. dockerfile 생성
  ㄴ cat > dockerfile
-----------------------------------------
# syntax=docker/dockerfile:1
FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]
-----------------------------------------

- 3. docker-compose.yaml 생성
  ㄴ cat > docker-compose.yaml
-----------------------------------------
version: "3.9"
services:
  web:
    build: .
    ports:
      - "5000:5000"
  redis:
    image: "redis:alpine"
-----------------------------------------

- 4. docker-compose 실행
  ㄴ docker-compose up

- 5. docker-compose.yaml 변경 (볼륨 추가)
  ㄴ .:/code 는 app.py 파일이 존재하는 위치이다.
-----------------------------------------
version: "3.9"
services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/code
    environment:
      FLASK_ENV: development
  redis:
    image: "redis:alpine"
-----------------------------------------

- 6. 재빌드
  ㄴ docker-compose up -d

- 7. 볼륨 마운트된 app.py 수정 해보기
  ㄴ vi app.py
  ㄴ return 메세지를 수정
  ㄴ curl localhost:5000 에서 변경 텍스트 확인
  
- 8. 기타 명령어들
  ㄴ -d   : detatch 모드
  ㄴ ps   : 상태조회
  ㄴ run  : docker exec 와 동일
  ㄴ stop : 컨테이너 종료
  ㄴ down : 컨테이너 삭제
  ㄴ down --volumes : 영구볼륨내용도 같이 삭제
  
#########################################################################
3. MySQL 데이터베이스를 사용하는 WordPress 운영하기
- 0. 시작하기
  ㄴ https://docs.docker.com/samples/wordpress/
  
- 1. 작업 디렉토리 생성
  ㄴ mkdir wordpress
  ㄴ cd wordpress
  
- 2. docker-compose.yaml 생성
-----------------------------------------
version: "3.9"
services:
  db:
    image: mysql:5.7
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    volumes:
      - wordpress_data:/var/www/html
    ports:
      - "8000:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
volumes:
  db_data: {}
  wordpress_data: {}
-----------------------------------------
- 3. docker-compose 실행
  ㄴ docker-compose up -d
  
- 4. 서비스 확인

- 5. 서비스 종료
  ㄴ docker-compose down --volumes
  
- 6. 그외 명령어들
  ㄴ docker-compose --help
  
[끝]